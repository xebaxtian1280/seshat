{"version":3,"file":"webgl-vector-layer.js","mappings":"sLAUA,MAAMA,EAAQ,CACZ,eAAgB,CAAC,IAAK,CAAC,MAAO,SAAU,CAAC,IAAK,IAAK,MACnD,eAAgB,EAChB,iBAAkB,EAClB,aAAc,CAAC,IAAK,CAAC,MAAO,SAAU,CAAC,IAAK,IAAK,IAAK,MAGxD,MAAMC,UAAmB,IACvB,cAAAC,GACE,OAAO,IAAI,IAAyBC,KAAM,CACxCH,SAEJ,EAGF,MAAMI,EAAM,IAAI,IAAU,CACxBC,OAAQ,IAAI,MAGRC,EAAc,IAAIL,EAAW,CACjCI,OAAQ,IAAI,IAAa,CACvBE,IAAK,qDACLC,OAAQ,IAAI,QAIVC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACN,EAAKE,GACdK,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAiB,IAAId,EAAW,CACpCI,OAAQ,IAAI,IACZI,IAAKA,EACLT,MAAO,CACL,eAAgB,2BAChB,eAAgB,KAIpB,IAAIgB,EACJ,MAAMC,EAAqB,SAAUC,GACnC,MAAMC,EAAUV,EAAIW,sBAAsBF,GAAO,SAAUC,GACzD,OAAOA,CACT,IAEME,EAAOC,SAASC,eAAe,QAEnCF,EAAKG,UADHL,GACeA,EAAQM,IAAI,aAEZ,SAGfN,IAAYH,IACVA,GACFD,EAAeW,YAAYC,cAAcX,GAEvCG,GACFJ,EAAeW,YAAYE,WAAWT,GAExCH,EAAYG,EAEhB,EAEAV,EAAIoB,GAAG,eAAe,SAAUC,GAC9B,GAAIA,EAAIC,SACN,OAEF,MAAMb,EAAQT,EAAIuB,cAAcF,EAAIG,eACpChB,EAAmBC,EACrB,IAEAT,EAAIoB,GAAG,SAAS,SAAUC,GACxBb,EAAmBa,EAAIZ,MACzB,G","sources":["webpack:///./webgl-vector-layer.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Layer from '../src/ol/layer/Layer.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport WebGLVectorLayerRenderer from '../src/ol/renderer/webgl/VectorLayer.js';\n\n/** @type {import('../src/ol/style/webgl.js').WebGLStyle} */\nconst style = {\n  'stroke-color': ['*', ['get', 'COLOR'], [220, 220, 220]],\n  'stroke-width': 2,\n  'stroke-offset': -1,\n  'fill-color': ['*', ['get', 'COLOR'], [255, 255, 255, 0.6]],\n};\n\nclass WebGLLayer extends Layer {\n  createRenderer() {\n    return new WebGLVectorLayerRenderer(this, {\n      style,\n    });\n  }\n}\n\nconst osm = new TileLayer({\n  source: new OSM(),\n});\n\nconst vectorLayer = new WebGLLayer({\n  source: new VectorSource({\n    url: 'https://openlayers.org/data/vector/ecoregions.json',\n    format: new GeoJSON(),\n  }),\n});\n\nconst map = new Map({\n  layers: [osm, vectorLayer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n\nconst featureOverlay = new WebGLLayer({\n  source: new VectorSource(),\n  map: map,\n  style: {\n    'stroke-color': 'rgba(255, 255, 255, 0.7)',\n    'stroke-width': 1,\n  },\n});\n\nlet highlight;\nconst displayFeatureInfo = function (pixel) {\n  const feature = map.forEachFeatureAtPixel(pixel, function (feature) {\n    return feature;\n  });\n\n  const info = document.getElementById('info');\n  if (feature) {\n    info.innerHTML = feature.get('ECO_NAME') || '&nbsp;';\n  } else {\n    info.innerHTML = '&nbsp;';\n  }\n\n  if (feature !== highlight) {\n    if (highlight) {\n      featureOverlay.getSource().removeFeature(highlight);\n    }\n    if (feature) {\n      featureOverlay.getSource().addFeature(feature);\n    }\n    highlight = feature;\n  }\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  displayFeatureInfo(pixel);\n});\n\nmap.on('click', function (evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"names":["style","WebGLLayer","createRenderer","this","osm","source","vectorLayer","url","format","map","layers","target","view","center","zoom","featureOverlay","highlight","displayFeatureInfo","pixel","feature","forEachFeatureAtPixel","info","document","getElementById","innerHTML","get","getSource","removeFeature","addFeature","on","evt","dragging","getEventPixel","originalEvent"],"sourceRoot":""}