{"version":3,"file":"webgl-draw-line.js","mappings":"iOAaA,IAAIA,EAEJ,MAAMC,UAAmB,IACvB,cAAAC,GACE,OAAO,IAAI,IAAyBC,KAAM,CACxCC,UAAWD,KAAKE,eAChBL,SAEJ,EAGF,MAAMM,EAAS,IAAI,IAAa,CAC9BC,IAAK,mCACLC,OAAQ,IAAI,MAQRC,EAAW,CAACC,EAAMC,KACtB,IAAIC,EAAW,CACbC,UAAWb,EACPA,EAAMa,UACN,CACEC,MAAO,GACPC,OAAQ,EACRC,QAAS,OACTC,SAAU,QACVC,WAAY,GACZC,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,WAAY,EACZC,eAAgB,GAEtB,eAAgB,CAAC,MAAO,SACxB,eAAgB,qBAChB,gBAAiB,CAAC,MAAO,UACzB,qBAAsB,CAAC,MAAO,cAC9B,kBAAmB,CAAC,MAAO,WAC3B,mBAAoB,CAAC,MAAO,aAsB9B,OApBId,IACFE,EAAW,IACNA,EACH,mBAAoB,CAClB,CAAC,MAAO,eACR,CAAC,MAAO,eACR,CAAC,MAAO,eACR,CAAC,MAAO,gBAEV,0BAA2B,CAAC,MAAO,gBAGnCD,WACKC,EAAS,gBAChBA,EAAW,IACNA,EACH,qBAAsB,eACtB,yBAA0B,CAAC,MAAO,oBAG/BA,CAAQ,EAGjBZ,EAAQS,GAAS,GAAO,GAExB,IAAIgB,EAAS,IAAIxB,EAAW,CAC1BK,WAGF,MAAMoB,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZrB,OAAQ,IAAI,MAEdmB,GAEFG,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,CAAC,KAAM,QAC1BC,KAAM,MAIJC,EAAe,KACnB,MAAMtB,EAAOuB,SAASC,eAAe,cAAcC,QAC7CxB,EAAUsB,SAASC,eAAe,iBAAiBC,QACzDnC,EAAQS,EAASC,EAAMC,GACvBe,EAAIU,YAAYX,GAChBA,EAAS,IAAIxB,EAAW,CACtBK,WAEFoB,EAAIW,SAASZ,EAAO,EAGhBa,EAAS,IAAI,IAAO,CAAChC,OAAQA,IAGnC,IAAIiC,EAAMC,EAFVd,EAAIe,eAAeH,GAKjBC,EAAO,IAAI,KAAK,CACdjC,OAAQA,EACRoC,KAAM,eAERhB,EAAIe,eAAeF,GACnBC,EAAO,IAAI,IAAK,CAAClC,OAAQA,IACzBoB,EAAIe,eAAeD,GAKrB,MAAMG,EAAiBC,IACrB,MAAM/B,EAAYb,EAAMa,UAClBgC,EAAeD,EAAMhB,OAAOkB,KACR,UAAtBF,EAAMhB,OAAOc,KACf7B,EAAUgC,GAAgBD,EAAMhB,OAAOmB,MAEvClC,EAAUgC,GAAgBG,WAAWJ,EAAMhB,OAAOmB,OAEpD,MAAME,EAAYhB,SAASC,eAAe,SAASW,KAC/CI,IACFA,EAAUC,YAAcrC,EAAUgC,IAEpCnB,EAAIyB,QAAQ,EAEdlB,SACGmB,iBAAiB,iBACjBC,SAASC,GAAUA,EAAMC,iBAAiB,QAASZ,KACtDV,SACGmB,iBAAiB,iBACjBC,SAASC,GAAUA,EAAMC,iBAAiB,QAASvB,I","sources":["webpack:///./webgl-draw-line.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Layer from '../src/ol/layer/Layer.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport WebGLVectorLayerRenderer from '../src/ol/renderer/webgl/VectorLayer.js';\nimport {Draw, Modify, Snap} from '../src/ol/interaction.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\n\n/**\n * @type {import('../src/ol/style/webgl.js').WebGLStyle}\n */\nlet style;\n\nclass WebGLLayer extends Layer {\n  createRenderer() {\n    return new WebGLVectorLayerRenderer(this, {\n      className: this.getClassName(),\n      style,\n    });\n  }\n}\n\nconst source = new VectorSource({\n  url: 'data/geojson/switzerland.geojson',\n  format: new GeoJSON(),\n});\n\n/**\n * @param {boolean} dash Include line dash\n * @param {boolean} pattern Include image pattern\n * @return {import('../src/ol/style/webgl.js').WebGLStyle} Generated style\n */\nconst getStyle = (dash, pattern) => {\n  let newStyle = {\n    variables: style\n      ? style.variables\n      : {\n          width: 12,\n          offset: 0,\n          capType: 'butt',\n          joinType: 'miter',\n          miterLimit: 10, // ratio\n          dashLength1: 25,\n          dashLength2: 15,\n          dashLength3: 15,\n          dashLength4: 15,\n          dashOffset: 0,\n          patternSpacing: 0,\n        },\n    'stroke-width': ['var', 'width'],\n    'stroke-color': 'rgba(24,86,34,0.7)',\n    'stroke-offset': ['var', 'offset'],\n    'stroke-miter-limit': ['var', 'miterLimit'],\n    'stroke-line-cap': ['var', 'capType'],\n    'stroke-line-join': ['var', 'joinType'],\n  };\n  if (dash) {\n    newStyle = {\n      ...newStyle,\n      'stroke-line-dash': [\n        ['var', 'dashLength1'],\n        ['var', 'dashLength2'],\n        ['var', 'dashLength3'],\n        ['var', 'dashLength4'],\n      ],\n      'stroke-line-dash-offset': ['var', 'dashOffset'],\n    };\n  }\n  if (pattern) {\n    delete newStyle['stroke-color'];\n    newStyle = {\n      ...newStyle,\n      'stroke-pattern-src': 'data/dot.svg',\n      'stroke-pattern-spacing': ['var', 'patternSpacing'],\n    };\n  }\n  return newStyle;\n};\n\nstyle = getStyle(false, false);\n\nlet vector = new WebGLLayer({\n  source,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    vector,\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([8.43, 46.82]),\n    zoom: 7,\n  }),\n});\n\nconst rebuildStyle = () => {\n  const dash = document.getElementById('dashEnable').checked;\n  const pattern = document.getElementById('patternEnable').checked;\n  style = getStyle(dash, pattern);\n  map.removeLayer(vector);\n  vector = new WebGLLayer({\n    source,\n  });\n  map.addLayer(vector);\n};\n\nconst modify = new Modify({source: source});\nmap.addInteraction(modify);\n\nlet draw, snap; // global so we can remove them later\n\nfunction addInteractions() {\n  draw = new Draw({\n    source: source,\n    type: 'LineString',\n  });\n  map.addInteraction(draw);\n  snap = new Snap({source: source});\n  map.addInteraction(snap);\n}\n\naddInteractions();\n\nconst inputListener = (event) => {\n  const variables = style.variables;\n  const variableName = event.target.name;\n  if (event.target.type === 'radio') {\n    variables[variableName] = event.target.value;\n  } else {\n    variables[variableName] = parseFloat(event.target.value);\n  }\n  const valueSpan = document.getElementById(`value-${variableName}`);\n  if (valueSpan) {\n    valueSpan.textContent = variables[variableName];\n  }\n  map.render();\n};\ndocument\n  .querySelectorAll('input.uniform')\n  .forEach((input) => input.addEventListener('input', inputListener));\ndocument\n  .querySelectorAll('input.rebuild')\n  .forEach((input) => input.addEventListener('input', rebuildStyle));\n"],"names":["style","WebGLLayer","createRenderer","this","className","getClassName","source","url","format","getStyle","dash","pattern","newStyle","variables","width","offset","capType","joinType","miterLimit","dashLength1","dashLength2","dashLength3","dashLength4","dashOffset","patternSpacing","vector","map","layers","target","view","center","zoom","rebuildStyle","document","getElementById","checked","removeLayer","addLayer","modify","draw","snap","addInteraction","type","inputListener","event","variableName","name","value","parseFloat","valueSpan","textContent","render","querySelectorAll","forEach","input","addEventListener"],"sourceRoot":""}