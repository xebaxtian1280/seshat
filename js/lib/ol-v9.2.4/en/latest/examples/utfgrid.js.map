{"version":3,"file":"utfgrid.js","mappings":"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","sources":["webpack:///../src/ol/source/UTFGrid.js","webpack:///./utfgrid.js"],"sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {listenOnce} from '../events.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative =\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative =\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(\n        this,\n        EventType.CHANGE,\n        function (e) {\n          callback(this.getData(coordinate));\n        },\n        this,\n      );\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(() => {\n          callback(this.getData(coordinate));\n        }, 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(\n          this.src_,\n          this.handleLoad_.bind(this),\n          this.handleError_.bind(this),\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ =\n      options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this),\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */ (\n        this.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2],\n          1,\n          this.getProjection(),\n        )\n      );\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection,\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution']) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState('ready');\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n    const tile = new CustomTile(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.tileGrid.getTileCoordExtent(tileCoord),\n      this.preemptive_,\n      this.jsonp_,\n    );\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UTFGrid;\n","import Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport UTFGrid from '../src/ol/source/UTFGrid.js';\nimport View from '../src/ol/View.js';\n\nconst key =\n  'pk.eyJ1IjoiYWhvY2V2YXIiLCJhIjoiY2t0cGdwMHVnMGdlbzMxbDhwazBic2xrNSJ9.WbcTL9uj8JPAsnT9mgb7oQ';\n\nconst mapLayer = new TileLayer({\n  source: new TileJSON({\n    url:\n      'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' +\n      key,\n  }),\n});\n\nconst gridSource = new UTFGrid({\n  url:\n    'https://api.tiles.mapbox.com/v4/mapbox.geography-class.json?secure&access_token=' +\n    key,\n});\n\nconst gridLayer = new TileLayer({source: gridSource});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 1,\n});\n\nconst mapElement = document.getElementById('map');\nconst map = new Map({\n  layers: [mapLayer, gridLayer],\n  target: mapElement,\n  view: view,\n});\n\nconst infoElement = document.getElementById('country-info');\nconst flagElement = document.getElementById('country-flag');\nconst nameElement = document.getElementById('country-name');\n\nconst infoOverlay = new Overlay({\n  element: infoElement,\n  offset: [15, 15],\n  stopEvent: false,\n});\nmap.addOverlay(infoOverlay);\n\nconst displayCountryInfo = function (coordinate) {\n  const viewResolution = /** @type {number} */ (view.getResolution());\n  gridSource.forDataAtCoordinateAndResolution(\n    coordinate,\n    viewResolution,\n    function (data) {\n      // If you want to use the template from the TileJSON,\n      //  load the mustache.js library separately and call\n      //  info.innerHTML = Mustache.render(gridSource.getTemplate(), data);\n      mapElement.style.cursor = data ? 'pointer' : '';\n      if (data) {\n        flagElement.src = 'data:image/png;base64,' + data['flag_png'];\n        nameElement.innerHTML = data['admin'];\n      }\n      infoOverlay.setPosition(data ? coordinate : undefined);\n    },\n  );\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displayCountryInfo(coordinate);\n});\n\nmap.on('click', function (evt) {\n  displayCountryInfo(evt.coordinate);\n});\n"],"names":["CustomTile","constructor","tileCoord","state","src","extent","preemptive","jsonp","super","this","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","getImage","getData","coordinate","xRelative","yRelative","row","Math","floor","length","code","charCodeAt","data","id","forDataAtCoordinate","callback","request","TileState","EMPTY","IDLE","EventType","CHANGE","e","loadInternal_","setTimeout","getKey","handleError_","ERROR","changed","handleLoad_","json","LOADED","LOADING","bind","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","status","response","JSON","parse","responseText","err","load","setState","UTFGrid","options","projection","wrapX","undefined","zDirection","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","Error","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","getTileCoordForCoordAndZ","getTile","getProjection","epsg4326Projection","sourceProjection","transform","gridExtent","minZoom","maxZoom","grids","attributionExtent","setAttributions","frameState","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","get","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","getTileCoordExtent","set","useTile","key","mapLayer","Tile","source","TileJSON","gridSource","gridLayer","view","View","center","zoom","mapElement","document","getElementById","map","Map","layers","target","infoElement","flagElement","nameElement","infoOverlay","Overlay","element","offset","stopEvent","addOverlay","displayCountryInfo","viewResolution","getResolution","style","cursor","innerHTML","setPosition","on","evt","dragging","getEventCoordinate","originalEvent"],"sourceRoot":""}